//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Lab {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DB")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DB : global::System.Data.DataSet {
        
        private Bill_MasDataTable tableBill_Mas;
        
        private Bill_TransDataTable tableBill_Trans;
        
        private PARA_TYPE_MASDataTable tablePARA_TYPE_MAS;
        
        private LAB_MASDataTable tableLAB_MAS;
        
        private PATIENT_MASDataTable tablePATIENT_MAS;
        
        private REF_DR_MASDataTable tableREF_DR_MAS;
        
        private BILL_MAS_REPORTDataTable tableBILL_MAS_REPORT;
        
        private BILL_TRANS_REPORTDataTable tableBILL_TRANS_REPORT;
        
        private global::System.Data.DataRelation relationLAB_MAS_PATIENT_MAS;
        
        private global::System.Data.DataRelation relationLAB_MAS_REF_DR_MAS;
        
        private global::System.Data.DataRelation relationBill_Trans_PARA_TYPE_MAS;
        
        private global::System.Data.DataRelation relationBill_Mas_Bill_Trans;
        
        private global::System.Data.DataRelation relationBill_Mas_LAB_MAS;
        
        private global::System.Data.DataRelation relationBILL_MAS_REPORT_BILL_TRANS_REPORT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DB() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DB(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Bill_Mas"] != null)) {
                    base.Tables.Add(new Bill_MasDataTable(ds.Tables["Bill_Mas"]));
                }
                if ((ds.Tables["Bill_Trans"] != null)) {
                    base.Tables.Add(new Bill_TransDataTable(ds.Tables["Bill_Trans"]));
                }
                if ((ds.Tables["PARA_TYPE_MAS"] != null)) {
                    base.Tables.Add(new PARA_TYPE_MASDataTable(ds.Tables["PARA_TYPE_MAS"]));
                }
                if ((ds.Tables["LAB_MAS"] != null)) {
                    base.Tables.Add(new LAB_MASDataTable(ds.Tables["LAB_MAS"]));
                }
                if ((ds.Tables["PATIENT_MAS"] != null)) {
                    base.Tables.Add(new PATIENT_MASDataTable(ds.Tables["PATIENT_MAS"]));
                }
                if ((ds.Tables["REF_DR_MAS"] != null)) {
                    base.Tables.Add(new REF_DR_MASDataTable(ds.Tables["REF_DR_MAS"]));
                }
                if ((ds.Tables["BILL_MAS_REPORT"] != null)) {
                    base.Tables.Add(new BILL_MAS_REPORTDataTable(ds.Tables["BILL_MAS_REPORT"]));
                }
                if ((ds.Tables["BILL_TRANS_REPORT"] != null)) {
                    base.Tables.Add(new BILL_TRANS_REPORTDataTable(ds.Tables["BILL_TRANS_REPORT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Bill_MasDataTable Bill_Mas {
            get {
                return this.tableBill_Mas;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Bill_TransDataTable Bill_Trans {
            get {
                return this.tableBill_Trans;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PARA_TYPE_MASDataTable PARA_TYPE_MAS {
            get {
                return this.tablePARA_TYPE_MAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LAB_MASDataTable LAB_MAS {
            get {
                return this.tableLAB_MAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PATIENT_MASDataTable PATIENT_MAS {
            get {
                return this.tablePATIENT_MAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REF_DR_MASDataTable REF_DR_MAS {
            get {
                return this.tableREF_DR_MAS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BILL_MAS_REPORTDataTable BILL_MAS_REPORT {
            get {
                return this.tableBILL_MAS_REPORT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BILL_TRANS_REPORTDataTable BILL_TRANS_REPORT {
            get {
                return this.tableBILL_TRANS_REPORT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DB cln = ((DB)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Bill_Mas"] != null)) {
                    base.Tables.Add(new Bill_MasDataTable(ds.Tables["Bill_Mas"]));
                }
                if ((ds.Tables["Bill_Trans"] != null)) {
                    base.Tables.Add(new Bill_TransDataTable(ds.Tables["Bill_Trans"]));
                }
                if ((ds.Tables["PARA_TYPE_MAS"] != null)) {
                    base.Tables.Add(new PARA_TYPE_MASDataTable(ds.Tables["PARA_TYPE_MAS"]));
                }
                if ((ds.Tables["LAB_MAS"] != null)) {
                    base.Tables.Add(new LAB_MASDataTable(ds.Tables["LAB_MAS"]));
                }
                if ((ds.Tables["PATIENT_MAS"] != null)) {
                    base.Tables.Add(new PATIENT_MASDataTable(ds.Tables["PATIENT_MAS"]));
                }
                if ((ds.Tables["REF_DR_MAS"] != null)) {
                    base.Tables.Add(new REF_DR_MASDataTable(ds.Tables["REF_DR_MAS"]));
                }
                if ((ds.Tables["BILL_MAS_REPORT"] != null)) {
                    base.Tables.Add(new BILL_MAS_REPORTDataTable(ds.Tables["BILL_MAS_REPORT"]));
                }
                if ((ds.Tables["BILL_TRANS_REPORT"] != null)) {
                    base.Tables.Add(new BILL_TRANS_REPORTDataTable(ds.Tables["BILL_TRANS_REPORT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBill_Mas = ((Bill_MasDataTable)(base.Tables["Bill_Mas"]));
            if ((initTable == true)) {
                if ((this.tableBill_Mas != null)) {
                    this.tableBill_Mas.InitVars();
                }
            }
            this.tableBill_Trans = ((Bill_TransDataTable)(base.Tables["Bill_Trans"]));
            if ((initTable == true)) {
                if ((this.tableBill_Trans != null)) {
                    this.tableBill_Trans.InitVars();
                }
            }
            this.tablePARA_TYPE_MAS = ((PARA_TYPE_MASDataTable)(base.Tables["PARA_TYPE_MAS"]));
            if ((initTable == true)) {
                if ((this.tablePARA_TYPE_MAS != null)) {
                    this.tablePARA_TYPE_MAS.InitVars();
                }
            }
            this.tableLAB_MAS = ((LAB_MASDataTable)(base.Tables["LAB_MAS"]));
            if ((initTable == true)) {
                if ((this.tableLAB_MAS != null)) {
                    this.tableLAB_MAS.InitVars();
                }
            }
            this.tablePATIENT_MAS = ((PATIENT_MASDataTable)(base.Tables["PATIENT_MAS"]));
            if ((initTable == true)) {
                if ((this.tablePATIENT_MAS != null)) {
                    this.tablePATIENT_MAS.InitVars();
                }
            }
            this.tableREF_DR_MAS = ((REF_DR_MASDataTable)(base.Tables["REF_DR_MAS"]));
            if ((initTable == true)) {
                if ((this.tableREF_DR_MAS != null)) {
                    this.tableREF_DR_MAS.InitVars();
                }
            }
            this.tableBILL_MAS_REPORT = ((BILL_MAS_REPORTDataTable)(base.Tables["BILL_MAS_REPORT"]));
            if ((initTable == true)) {
                if ((this.tableBILL_MAS_REPORT != null)) {
                    this.tableBILL_MAS_REPORT.InitVars();
                }
            }
            this.tableBILL_TRANS_REPORT = ((BILL_TRANS_REPORTDataTable)(base.Tables["BILL_TRANS_REPORT"]));
            if ((initTable == true)) {
                if ((this.tableBILL_TRANS_REPORT != null)) {
                    this.tableBILL_TRANS_REPORT.InitVars();
                }
            }
            this.relationLAB_MAS_PATIENT_MAS = this.Relations["LAB_MAS_PATIENT_MAS"];
            this.relationLAB_MAS_REF_DR_MAS = this.Relations["LAB_MAS_REF_DR_MAS"];
            this.relationBill_Trans_PARA_TYPE_MAS = this.Relations["Bill_Trans_PARA_TYPE_MAS"];
            this.relationBill_Mas_Bill_Trans = this.Relations["Bill_Mas_Bill_Trans"];
            this.relationBill_Mas_LAB_MAS = this.Relations["Bill_Mas_LAB_MAS"];
            this.relationBILL_MAS_REPORT_BILL_TRANS_REPORT = this.Relations["BILL_MAS_REPORT_BILL_TRANS_REPORT"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DB";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DB.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBill_Mas = new Bill_MasDataTable();
            base.Tables.Add(this.tableBill_Mas);
            this.tableBill_Trans = new Bill_TransDataTable();
            base.Tables.Add(this.tableBill_Trans);
            this.tablePARA_TYPE_MAS = new PARA_TYPE_MASDataTable();
            base.Tables.Add(this.tablePARA_TYPE_MAS);
            this.tableLAB_MAS = new LAB_MASDataTable();
            base.Tables.Add(this.tableLAB_MAS);
            this.tablePATIENT_MAS = new PATIENT_MASDataTable();
            base.Tables.Add(this.tablePATIENT_MAS);
            this.tableREF_DR_MAS = new REF_DR_MASDataTable();
            base.Tables.Add(this.tableREF_DR_MAS);
            this.tableBILL_MAS_REPORT = new BILL_MAS_REPORTDataTable();
            base.Tables.Add(this.tableBILL_MAS_REPORT);
            this.tableBILL_TRANS_REPORT = new BILL_TRANS_REPORTDataTable();
            base.Tables.Add(this.tableBILL_TRANS_REPORT);
            this.relationLAB_MAS_PATIENT_MAS = new global::System.Data.DataRelation("LAB_MAS_PATIENT_MAS", new global::System.Data.DataColumn[] {
                        this.tableLAB_MAS.P_CODEColumn}, new global::System.Data.DataColumn[] {
                        this.tablePATIENT_MAS.P_CODEColumn}, false);
            this.Relations.Add(this.relationLAB_MAS_PATIENT_MAS);
            this.relationLAB_MAS_REF_DR_MAS = new global::System.Data.DataRelation("LAB_MAS_REF_DR_MAS", new global::System.Data.DataColumn[] {
                        this.tableLAB_MAS.R_CODEColumn}, new global::System.Data.DataColumn[] {
                        this.tableREF_DR_MAS.R_CODEColumn}, false);
            this.Relations.Add(this.relationLAB_MAS_REF_DR_MAS);
            this.relationBill_Trans_PARA_TYPE_MAS = new global::System.Data.DataRelation("Bill_Trans_PARA_TYPE_MAS", new global::System.Data.DataColumn[] {
                        this.tableBill_Trans.PARA_TYPE_CODEColumn}, new global::System.Data.DataColumn[] {
                        this.tablePARA_TYPE_MAS.PARA_TYPE_CODEColumn}, false);
            this.Relations.Add(this.relationBill_Trans_PARA_TYPE_MAS);
            this.relationBill_Mas_Bill_Trans = new global::System.Data.DataRelation("Bill_Mas_Bill_Trans", new global::System.Data.DataColumn[] {
                        this.tableBill_Mas.BILL_NOColumn}, new global::System.Data.DataColumn[] {
                        this.tableBill_Trans.BILL_NOColumn}, false);
            this.Relations.Add(this.relationBill_Mas_Bill_Trans);
            this.relationBill_Mas_LAB_MAS = new global::System.Data.DataRelation("Bill_Mas_LAB_MAS", new global::System.Data.DataColumn[] {
                        this.tableBill_Mas.LAB_CODEColumn}, new global::System.Data.DataColumn[] {
                        this.tableLAB_MAS.LAB_CODEColumn}, false);
            this.Relations.Add(this.relationBill_Mas_LAB_MAS);
            this.relationBILL_MAS_REPORT_BILL_TRANS_REPORT = new global::System.Data.DataRelation("BILL_MAS_REPORT_BILL_TRANS_REPORT", new global::System.Data.DataColumn[] {
                        this.tableBILL_MAS_REPORT.BILL_NOColumn}, new global::System.Data.DataColumn[] {
                        this.tableBILL_TRANS_REPORT.BILL_NOColumn}, false);
            this.Relations.Add(this.relationBILL_MAS_REPORT_BILL_TRANS_REPORT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBill_Mas() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBill_Trans() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePARA_TYPE_MAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLAB_MAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePATIENT_MAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREF_DR_MAS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBILL_MAS_REPORT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBILL_TRANS_REPORT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DB ds = new DB();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Bill_MasRowChangeEventHandler(object sender, Bill_MasRowChangeEvent e);
        
        public delegate void Bill_TransRowChangeEventHandler(object sender, Bill_TransRowChangeEvent e);
        
        public delegate void PARA_TYPE_MASRowChangeEventHandler(object sender, PARA_TYPE_MASRowChangeEvent e);
        
        public delegate void LAB_MASRowChangeEventHandler(object sender, LAB_MASRowChangeEvent e);
        
        public delegate void PATIENT_MASRowChangeEventHandler(object sender, PATIENT_MASRowChangeEvent e);
        
        public delegate void REF_DR_MASRowChangeEventHandler(object sender, REF_DR_MASRowChangeEvent e);
        
        public delegate void BILL_MAS_REPORTRowChangeEventHandler(object sender, BILL_MAS_REPORTRowChangeEvent e);
        
        public delegate void BILL_TRANS_REPORTRowChangeEventHandler(object sender, BILL_TRANS_REPORTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Bill_MasDataTable : global::System.Data.TypedTableBase<Bill_MasRow> {
            
            private global::System.Data.DataColumn columnBILL_NO;
            
            private global::System.Data.DataColumn columnBILL_DATE;
            
            private global::System.Data.DataColumn columnBILL_TIME;
            
            private global::System.Data.DataColumn columnLAB_CODE;
            
            private global::System.Data.DataColumn columnTOTAL_AMT;
            
            private global::System.Data.DataColumn columnLESS_AMT;
            
            private global::System.Data.DataColumn columnNET_AMT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasDataTable() {
                this.TableName = "Bill_Mas";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Bill_MasDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Bill_MasDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_NOColumn {
                get {
                    return this.columnBILL_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_DATEColumn {
                get {
                    return this.columnBILL_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_TIMEColumn {
                get {
                    return this.columnBILL_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAB_CODEColumn {
                get {
                    return this.columnLAB_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_AMTColumn {
                get {
                    return this.columnTOTAL_AMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LESS_AMTColumn {
                get {
                    return this.columnLESS_AMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NET_AMTColumn {
                get {
                    return this.columnNET_AMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasRow this[int index] {
                get {
                    return ((Bill_MasRow)(this.Rows[index]));
                }
            }
            
            public event Bill_MasRowChangeEventHandler Bill_MasRowChanging;
            
            public event Bill_MasRowChangeEventHandler Bill_MasRowChanged;
            
            public event Bill_MasRowChangeEventHandler Bill_MasRowDeleting;
            
            public event Bill_MasRowChangeEventHandler Bill_MasRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBill_MasRow(Bill_MasRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasRow AddBill_MasRow(int BILL_NO, string BILL_DATE, string BILL_TIME, int LAB_CODE, int TOTAL_AMT, int LESS_AMT, int NET_AMT) {
                Bill_MasRow rowBill_MasRow = ((Bill_MasRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BILL_NO,
                        BILL_DATE,
                        BILL_TIME,
                        LAB_CODE,
                        TOTAL_AMT,
                        LESS_AMT,
                        NET_AMT};
                rowBill_MasRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBill_MasRow);
                return rowBill_MasRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Bill_MasDataTable cln = ((Bill_MasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Bill_MasDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBILL_NO = base.Columns["BILL_NO"];
                this.columnBILL_DATE = base.Columns["BILL_DATE"];
                this.columnBILL_TIME = base.Columns["BILL_TIME"];
                this.columnLAB_CODE = base.Columns["LAB_CODE"];
                this.columnTOTAL_AMT = base.Columns["TOTAL_AMT"];
                this.columnLESS_AMT = base.Columns["LESS_AMT"];
                this.columnNET_AMT = base.Columns["NET_AMT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBILL_NO = new global::System.Data.DataColumn("BILL_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_NO);
                this.columnBILL_DATE = new global::System.Data.DataColumn("BILL_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_DATE);
                this.columnBILL_TIME = new global::System.Data.DataColumn("BILL_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_TIME);
                this.columnLAB_CODE = new global::System.Data.DataColumn("LAB_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAB_CODE);
                this.columnTOTAL_AMT = new global::System.Data.DataColumn("TOTAL_AMT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_AMT);
                this.columnLESS_AMT = new global::System.Data.DataColumn("LESS_AMT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLESS_AMT);
                this.columnNET_AMT = new global::System.Data.DataColumn("NET_AMT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNET_AMT);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasRow NewBill_MasRow() {
                return ((Bill_MasRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Bill_MasRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Bill_MasRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Bill_MasRowChanged != null)) {
                    this.Bill_MasRowChanged(this, new Bill_MasRowChangeEvent(((Bill_MasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Bill_MasRowChanging != null)) {
                    this.Bill_MasRowChanging(this, new Bill_MasRowChangeEvent(((Bill_MasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Bill_MasRowDeleted != null)) {
                    this.Bill_MasRowDeleted(this, new Bill_MasRowChangeEvent(((Bill_MasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Bill_MasRowDeleting != null)) {
                    this.Bill_MasRowDeleting(this, new Bill_MasRowChangeEvent(((Bill_MasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBill_MasRow(Bill_MasRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Bill_MasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Bill_TransDataTable : global::System.Data.TypedTableBase<Bill_TransRow> {
            
            private global::System.Data.DataColumn columnBILL_NO;
            
            private global::System.Data.DataColumn columnDETAILID;
            
            private global::System.Data.DataColumn columnPARA_TYPE_CODE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransDataTable() {
                this.TableName = "Bill_Trans";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Bill_TransDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Bill_TransDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_NOColumn {
                get {
                    return this.columnBILL_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DETAILIDColumn {
                get {
                    return this.columnDETAILID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARA_TYPE_CODEColumn {
                get {
                    return this.columnPARA_TYPE_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransRow this[int index] {
                get {
                    return ((Bill_TransRow)(this.Rows[index]));
                }
            }
            
            public event Bill_TransRowChangeEventHandler Bill_TransRowChanging;
            
            public event Bill_TransRowChangeEventHandler Bill_TransRowChanged;
            
            public event Bill_TransRowChangeEventHandler Bill_TransRowDeleting;
            
            public event Bill_TransRowChangeEventHandler Bill_TransRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBill_TransRow(Bill_TransRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransRow AddBill_TransRow(Bill_MasRow parentBill_MasRowByBill_Mas_Bill_Trans, int DETAILID, int PARA_TYPE_CODE) {
                Bill_TransRow rowBill_TransRow = ((Bill_TransRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DETAILID,
                        PARA_TYPE_CODE};
                if ((parentBill_MasRowByBill_Mas_Bill_Trans != null)) {
                    columnValuesArray[0] = parentBill_MasRowByBill_Mas_Bill_Trans[0];
                }
                rowBill_TransRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBill_TransRow);
                return rowBill_TransRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Bill_TransDataTable cln = ((Bill_TransDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Bill_TransDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBILL_NO = base.Columns["BILL_NO"];
                this.columnDETAILID = base.Columns["DETAILID"];
                this.columnPARA_TYPE_CODE = base.Columns["PARA_TYPE_CODE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBILL_NO = new global::System.Data.DataColumn("BILL_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_NO);
                this.columnDETAILID = new global::System.Data.DataColumn("DETAILID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDETAILID);
                this.columnPARA_TYPE_CODE = new global::System.Data.DataColumn("PARA_TYPE_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARA_TYPE_CODE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransRow NewBill_TransRow() {
                return ((Bill_TransRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Bill_TransRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Bill_TransRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Bill_TransRowChanged != null)) {
                    this.Bill_TransRowChanged(this, new Bill_TransRowChangeEvent(((Bill_TransRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Bill_TransRowChanging != null)) {
                    this.Bill_TransRowChanging(this, new Bill_TransRowChangeEvent(((Bill_TransRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Bill_TransRowDeleted != null)) {
                    this.Bill_TransRowDeleted(this, new Bill_TransRowChangeEvent(((Bill_TransRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Bill_TransRowDeleting != null)) {
                    this.Bill_TransRowDeleting(this, new Bill_TransRowChangeEvent(((Bill_TransRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBill_TransRow(Bill_TransRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Bill_TransDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PARA_TYPE_MASDataTable : global::System.Data.TypedTableBase<PARA_TYPE_MASRow> {
            
            private global::System.Data.DataColumn columnPARA_TYPE_CODE;
            
            private global::System.Data.DataColumn columnPARA_TYPE;
            
            private global::System.Data.DataColumn columnPRICE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARA_TYPE_MASDataTable() {
                this.TableName = "PARA_TYPE_MAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARA_TYPE_MASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PARA_TYPE_MASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARA_TYPE_CODEColumn {
                get {
                    return this.columnPARA_TYPE_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARA_TYPEColumn {
                get {
                    return this.columnPARA_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEColumn {
                get {
                    return this.columnPRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARA_TYPE_MASRow this[int index] {
                get {
                    return ((PARA_TYPE_MASRow)(this.Rows[index]));
                }
            }
            
            public event PARA_TYPE_MASRowChangeEventHandler PARA_TYPE_MASRowChanging;
            
            public event PARA_TYPE_MASRowChangeEventHandler PARA_TYPE_MASRowChanged;
            
            public event PARA_TYPE_MASRowChangeEventHandler PARA_TYPE_MASRowDeleting;
            
            public event PARA_TYPE_MASRowChangeEventHandler PARA_TYPE_MASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPARA_TYPE_MASRow(PARA_TYPE_MASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARA_TYPE_MASRow AddPARA_TYPE_MASRow(Bill_TransRow parentBill_TransRowByBill_Trans_PARA_TYPE_MAS, string PARA_TYPE, int PRICE) {
                PARA_TYPE_MASRow rowPARA_TYPE_MASRow = ((PARA_TYPE_MASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PARA_TYPE,
                        PRICE};
                if ((parentBill_TransRowByBill_Trans_PARA_TYPE_MAS != null)) {
                    columnValuesArray[0] = parentBill_TransRowByBill_Trans_PARA_TYPE_MAS[2];
                }
                rowPARA_TYPE_MASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPARA_TYPE_MASRow);
                return rowPARA_TYPE_MASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PARA_TYPE_MASDataTable cln = ((PARA_TYPE_MASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PARA_TYPE_MASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPARA_TYPE_CODE = base.Columns["PARA_TYPE_CODE"];
                this.columnPARA_TYPE = base.Columns["PARA_TYPE"];
                this.columnPRICE = base.Columns["PRICE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPARA_TYPE_CODE = new global::System.Data.DataColumn("PARA_TYPE_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARA_TYPE_CODE);
                this.columnPARA_TYPE = new global::System.Data.DataColumn("PARA_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARA_TYPE);
                this.columnPRICE = new global::System.Data.DataColumn("PRICE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARA_TYPE_MASRow NewPARA_TYPE_MASRow() {
                return ((PARA_TYPE_MASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PARA_TYPE_MASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PARA_TYPE_MASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PARA_TYPE_MASRowChanged != null)) {
                    this.PARA_TYPE_MASRowChanged(this, new PARA_TYPE_MASRowChangeEvent(((PARA_TYPE_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PARA_TYPE_MASRowChanging != null)) {
                    this.PARA_TYPE_MASRowChanging(this, new PARA_TYPE_MASRowChangeEvent(((PARA_TYPE_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PARA_TYPE_MASRowDeleted != null)) {
                    this.PARA_TYPE_MASRowDeleted(this, new PARA_TYPE_MASRowChangeEvent(((PARA_TYPE_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PARA_TYPE_MASRowDeleting != null)) {
                    this.PARA_TYPE_MASRowDeleting(this, new PARA_TYPE_MASRowChangeEvent(((PARA_TYPE_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePARA_TYPE_MASRow(PARA_TYPE_MASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PARA_TYPE_MASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LAB_MASDataTable : global::System.Data.TypedTableBase<LAB_MASRow> {
            
            private global::System.Data.DataColumn columnLAB_CODE;
            
            private global::System.Data.DataColumn columnP_CODE;
            
            private global::System.Data.DataColumn columnR_CODE;
            
            private global::System.Data.DataColumn columnLAB_DATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASDataTable() {
                this.TableName = "LAB_MAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LAB_MASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LAB_MASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAB_CODEColumn {
                get {
                    return this.columnLAB_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_CODEColumn {
                get {
                    return this.columnP_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn R_CODEColumn {
                get {
                    return this.columnR_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAB_DATEColumn {
                get {
                    return this.columnLAB_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRow this[int index] {
                get {
                    return ((LAB_MASRow)(this.Rows[index]));
                }
            }
            
            public event LAB_MASRowChangeEventHandler LAB_MASRowChanging;
            
            public event LAB_MASRowChangeEventHandler LAB_MASRowChanged;
            
            public event LAB_MASRowChangeEventHandler LAB_MASRowDeleting;
            
            public event LAB_MASRowChangeEventHandler LAB_MASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLAB_MASRow(LAB_MASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRow AddLAB_MASRow(Bill_MasRow parentBill_MasRowByBill_Mas_LAB_MAS, int P_CODE, int R_CODE, string LAB_DATE) {
                LAB_MASRow rowLAB_MASRow = ((LAB_MASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        P_CODE,
                        R_CODE,
                        LAB_DATE};
                if ((parentBill_MasRowByBill_Mas_LAB_MAS != null)) {
                    columnValuesArray[0] = parentBill_MasRowByBill_Mas_LAB_MAS[3];
                }
                rowLAB_MASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLAB_MASRow);
                return rowLAB_MASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LAB_MASDataTable cln = ((LAB_MASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LAB_MASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLAB_CODE = base.Columns["LAB_CODE"];
                this.columnP_CODE = base.Columns["P_CODE"];
                this.columnR_CODE = base.Columns["R_CODE"];
                this.columnLAB_DATE = base.Columns["LAB_DATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLAB_CODE = new global::System.Data.DataColumn("LAB_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAB_CODE);
                this.columnP_CODE = new global::System.Data.DataColumn("P_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_CODE);
                this.columnR_CODE = new global::System.Data.DataColumn("R_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnR_CODE);
                this.columnLAB_DATE = new global::System.Data.DataColumn("LAB_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAB_DATE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRow NewLAB_MASRow() {
                return ((LAB_MASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LAB_MASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LAB_MASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LAB_MASRowChanged != null)) {
                    this.LAB_MASRowChanged(this, new LAB_MASRowChangeEvent(((LAB_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LAB_MASRowChanging != null)) {
                    this.LAB_MASRowChanging(this, new LAB_MASRowChangeEvent(((LAB_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LAB_MASRowDeleted != null)) {
                    this.LAB_MASRowDeleted(this, new LAB_MASRowChangeEvent(((LAB_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LAB_MASRowDeleting != null)) {
                    this.LAB_MASRowDeleting(this, new LAB_MASRowChangeEvent(((LAB_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLAB_MASRow(LAB_MASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LAB_MASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PATIENT_MASDataTable : global::System.Data.TypedTableBase<PATIENT_MASRow> {
            
            private global::System.Data.DataColumn columnP_CODE;
            
            private global::System.Data.DataColumn columnP_NAME;
            
            private global::System.Data.DataColumn columnP_AGE;
            
            private global::System.Data.DataColumn columnP_SEX;
            
            private global::System.Data.DataColumn columnP_AREA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_MASDataTable() {
                this.TableName = "PATIENT_MAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PATIENT_MASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PATIENT_MASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_CODEColumn {
                get {
                    return this.columnP_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_NAMEColumn {
                get {
                    return this.columnP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_AGEColumn {
                get {
                    return this.columnP_AGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_SEXColumn {
                get {
                    return this.columnP_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_AREAColumn {
                get {
                    return this.columnP_AREA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_MASRow this[int index] {
                get {
                    return ((PATIENT_MASRow)(this.Rows[index]));
                }
            }
            
            public event PATIENT_MASRowChangeEventHandler PATIENT_MASRowChanging;
            
            public event PATIENT_MASRowChangeEventHandler PATIENT_MASRowChanged;
            
            public event PATIENT_MASRowChangeEventHandler PATIENT_MASRowDeleting;
            
            public event PATIENT_MASRowChangeEventHandler PATIENT_MASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPATIENT_MASRow(PATIENT_MASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_MASRow AddPATIENT_MASRow(LAB_MASRow parentLAB_MASRowByLAB_MAS_PATIENT_MAS, string P_NAME, string P_AGE, string P_SEX, string P_AREA) {
                PATIENT_MASRow rowPATIENT_MASRow = ((PATIENT_MASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        P_NAME,
                        P_AGE,
                        P_SEX,
                        P_AREA};
                if ((parentLAB_MASRowByLAB_MAS_PATIENT_MAS != null)) {
                    columnValuesArray[0] = parentLAB_MASRowByLAB_MAS_PATIENT_MAS[1];
                }
                rowPATIENT_MASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPATIENT_MASRow);
                return rowPATIENT_MASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PATIENT_MASDataTable cln = ((PATIENT_MASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PATIENT_MASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnP_CODE = base.Columns["P_CODE"];
                this.columnP_NAME = base.Columns["P_NAME"];
                this.columnP_AGE = base.Columns["P_AGE"];
                this.columnP_SEX = base.Columns["P_SEX"];
                this.columnP_AREA = base.Columns["P_AREA"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnP_CODE = new global::System.Data.DataColumn("P_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_CODE);
                this.columnP_NAME = new global::System.Data.DataColumn("P_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_NAME);
                this.columnP_AGE = new global::System.Data.DataColumn("P_AGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_AGE);
                this.columnP_SEX = new global::System.Data.DataColumn("P_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_SEX);
                this.columnP_AREA = new global::System.Data.DataColumn("P_AREA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_AREA);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_MASRow NewPATIENT_MASRow() {
                return ((PATIENT_MASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PATIENT_MASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PATIENT_MASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PATIENT_MASRowChanged != null)) {
                    this.PATIENT_MASRowChanged(this, new PATIENT_MASRowChangeEvent(((PATIENT_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PATIENT_MASRowChanging != null)) {
                    this.PATIENT_MASRowChanging(this, new PATIENT_MASRowChangeEvent(((PATIENT_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PATIENT_MASRowDeleted != null)) {
                    this.PATIENT_MASRowDeleted(this, new PATIENT_MASRowChangeEvent(((PATIENT_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PATIENT_MASRowDeleting != null)) {
                    this.PATIENT_MASRowDeleting(this, new PATIENT_MASRowChangeEvent(((PATIENT_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePATIENT_MASRow(PATIENT_MASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PATIENT_MASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REF_DR_MASDataTable : global::System.Data.TypedTableBase<REF_DR_MASRow> {
            
            private global::System.Data.DataColumn columnR_CODE;
            
            private global::System.Data.DataColumn columnR_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REF_DR_MASDataTable() {
                this.TableName = "REF_DR_MAS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REF_DR_MASDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REF_DR_MASDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn R_CODEColumn {
                get {
                    return this.columnR_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn R_NAMEColumn {
                get {
                    return this.columnR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REF_DR_MASRow this[int index] {
                get {
                    return ((REF_DR_MASRow)(this.Rows[index]));
                }
            }
            
            public event REF_DR_MASRowChangeEventHandler REF_DR_MASRowChanging;
            
            public event REF_DR_MASRowChangeEventHandler REF_DR_MASRowChanged;
            
            public event REF_DR_MASRowChangeEventHandler REF_DR_MASRowDeleting;
            
            public event REF_DR_MASRowChangeEventHandler REF_DR_MASRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREF_DR_MASRow(REF_DR_MASRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REF_DR_MASRow AddREF_DR_MASRow(LAB_MASRow parentLAB_MASRowByLAB_MAS_REF_DR_MAS, string R_NAME) {
                REF_DR_MASRow rowREF_DR_MASRow = ((REF_DR_MASRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        R_NAME};
                if ((parentLAB_MASRowByLAB_MAS_REF_DR_MAS != null)) {
                    columnValuesArray[0] = parentLAB_MASRowByLAB_MAS_REF_DR_MAS[2];
                }
                rowREF_DR_MASRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowREF_DR_MASRow);
                return rowREF_DR_MASRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                REF_DR_MASDataTable cln = ((REF_DR_MASDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new REF_DR_MASDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnR_CODE = base.Columns["R_CODE"];
                this.columnR_NAME = base.Columns["R_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnR_CODE = new global::System.Data.DataColumn("R_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnR_CODE);
                this.columnR_NAME = new global::System.Data.DataColumn("R_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnR_NAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REF_DR_MASRow NewREF_DR_MASRow() {
                return ((REF_DR_MASRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new REF_DR_MASRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(REF_DR_MASRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REF_DR_MASRowChanged != null)) {
                    this.REF_DR_MASRowChanged(this, new REF_DR_MASRowChangeEvent(((REF_DR_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REF_DR_MASRowChanging != null)) {
                    this.REF_DR_MASRowChanging(this, new REF_DR_MASRowChangeEvent(((REF_DR_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REF_DR_MASRowDeleted != null)) {
                    this.REF_DR_MASRowDeleted(this, new REF_DR_MASRowChangeEvent(((REF_DR_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REF_DR_MASRowDeleting != null)) {
                    this.REF_DR_MASRowDeleting(this, new REF_DR_MASRowChangeEvent(((REF_DR_MASRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREF_DR_MASRow(REF_DR_MASRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REF_DR_MASDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BILL_MAS_REPORTDataTable : global::System.Data.TypedTableBase<BILL_MAS_REPORTRow> {
            
            private global::System.Data.DataColumn columnBILL_NO;
            
            private global::System.Data.DataColumn columnBILL_DATE;
            
            private global::System.Data.DataColumn columnBILL_TIME;
            
            private global::System.Data.DataColumn columnLAB_CODE;
            
            private global::System.Data.DataColumn columnP_CODE;
            
            private global::System.Data.DataColumn columnP_NAME;
            
            private global::System.Data.DataColumn columnP_AGE;
            
            private global::System.Data.DataColumn columnP_SEX;
            
            private global::System.Data.DataColumn columnP_AREA;
            
            private global::System.Data.DataColumn columnR_CODE;
            
            private global::System.Data.DataColumn columnR_NAME;
            
            private global::System.Data.DataColumn columnLAB_DATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MAS_REPORTDataTable() {
                this.TableName = "BILL_MAS_REPORT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_MAS_REPORTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BILL_MAS_REPORTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_NOColumn {
                get {
                    return this.columnBILL_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_DATEColumn {
                get {
                    return this.columnBILL_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_TIMEColumn {
                get {
                    return this.columnBILL_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAB_CODEColumn {
                get {
                    return this.columnLAB_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_CODEColumn {
                get {
                    return this.columnP_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_NAMEColumn {
                get {
                    return this.columnP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_AGEColumn {
                get {
                    return this.columnP_AGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_SEXColumn {
                get {
                    return this.columnP_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn P_AREAColumn {
                get {
                    return this.columnP_AREA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn R_CODEColumn {
                get {
                    return this.columnR_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn R_NAMEColumn {
                get {
                    return this.columnR_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LAB_DATEColumn {
                get {
                    return this.columnLAB_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MAS_REPORTRow this[int index] {
                get {
                    return ((BILL_MAS_REPORTRow)(this.Rows[index]));
                }
            }
            
            public event BILL_MAS_REPORTRowChangeEventHandler BILL_MAS_REPORTRowChanging;
            
            public event BILL_MAS_REPORTRowChangeEventHandler BILL_MAS_REPORTRowChanged;
            
            public event BILL_MAS_REPORTRowChangeEventHandler BILL_MAS_REPORTRowDeleting;
            
            public event BILL_MAS_REPORTRowChangeEventHandler BILL_MAS_REPORTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBILL_MAS_REPORTRow(BILL_MAS_REPORTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MAS_REPORTRow AddBILL_MAS_REPORTRow(int BILL_NO, string BILL_DATE, string BILL_TIME, int LAB_CODE, int P_CODE, string P_NAME, string P_AGE, string P_SEX, string P_AREA, int R_CODE, string R_NAME, string LAB_DATE) {
                BILL_MAS_REPORTRow rowBILL_MAS_REPORTRow = ((BILL_MAS_REPORTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BILL_NO,
                        BILL_DATE,
                        BILL_TIME,
                        LAB_CODE,
                        P_CODE,
                        P_NAME,
                        P_AGE,
                        P_SEX,
                        P_AREA,
                        R_CODE,
                        R_NAME,
                        LAB_DATE};
                rowBILL_MAS_REPORTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBILL_MAS_REPORTRow);
                return rowBILL_MAS_REPORTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BILL_MAS_REPORTDataTable cln = ((BILL_MAS_REPORTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BILL_MAS_REPORTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBILL_NO = base.Columns["BILL_NO"];
                this.columnBILL_DATE = base.Columns["BILL_DATE"];
                this.columnBILL_TIME = base.Columns["BILL_TIME"];
                this.columnLAB_CODE = base.Columns["LAB_CODE"];
                this.columnP_CODE = base.Columns["P_CODE"];
                this.columnP_NAME = base.Columns["P_NAME"];
                this.columnP_AGE = base.Columns["P_AGE"];
                this.columnP_SEX = base.Columns["P_SEX"];
                this.columnP_AREA = base.Columns["P_AREA"];
                this.columnR_CODE = base.Columns["R_CODE"];
                this.columnR_NAME = base.Columns["R_NAME"];
                this.columnLAB_DATE = base.Columns["LAB_DATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBILL_NO = new global::System.Data.DataColumn("BILL_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_NO);
                this.columnBILL_DATE = new global::System.Data.DataColumn("BILL_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_DATE);
                this.columnBILL_TIME = new global::System.Data.DataColumn("BILL_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_TIME);
                this.columnLAB_CODE = new global::System.Data.DataColumn("LAB_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAB_CODE);
                this.columnP_CODE = new global::System.Data.DataColumn("P_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_CODE);
                this.columnP_NAME = new global::System.Data.DataColumn("P_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_NAME);
                this.columnP_AGE = new global::System.Data.DataColumn("P_AGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_AGE);
                this.columnP_SEX = new global::System.Data.DataColumn("P_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_SEX);
                this.columnP_AREA = new global::System.Data.DataColumn("P_AREA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnP_AREA);
                this.columnR_CODE = new global::System.Data.DataColumn("R_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnR_CODE);
                this.columnR_NAME = new global::System.Data.DataColumn("R_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnR_NAME);
                this.columnLAB_DATE = new global::System.Data.DataColumn("LAB_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLAB_DATE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MAS_REPORTRow NewBILL_MAS_REPORTRow() {
                return ((BILL_MAS_REPORTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BILL_MAS_REPORTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BILL_MAS_REPORTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BILL_MAS_REPORTRowChanged != null)) {
                    this.BILL_MAS_REPORTRowChanged(this, new BILL_MAS_REPORTRowChangeEvent(((BILL_MAS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BILL_MAS_REPORTRowChanging != null)) {
                    this.BILL_MAS_REPORTRowChanging(this, new BILL_MAS_REPORTRowChangeEvent(((BILL_MAS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BILL_MAS_REPORTRowDeleted != null)) {
                    this.BILL_MAS_REPORTRowDeleted(this, new BILL_MAS_REPORTRowChangeEvent(((BILL_MAS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BILL_MAS_REPORTRowDeleting != null)) {
                    this.BILL_MAS_REPORTRowDeleting(this, new BILL_MAS_REPORTRowChangeEvent(((BILL_MAS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBILL_MAS_REPORTRow(BILL_MAS_REPORTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BILL_MAS_REPORTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BILL_TRANS_REPORTDataTable : global::System.Data.TypedTableBase<BILL_TRANS_REPORTRow> {
            
            private global::System.Data.DataColumn columnBILL_NO;
            
            private global::System.Data.DataColumn columnDETAILID;
            
            private global::System.Data.DataColumn columnPARA_TYPE_CODE;
            
            private global::System.Data.DataColumn columnPARA_TYPE;
            
            private global::System.Data.DataColumn columnPRICE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_TRANS_REPORTDataTable() {
                this.TableName = "BILL_TRANS_REPORT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_TRANS_REPORTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BILL_TRANS_REPORTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BILL_NOColumn {
                get {
                    return this.columnBILL_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DETAILIDColumn {
                get {
                    return this.columnDETAILID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARA_TYPE_CODEColumn {
                get {
                    return this.columnPARA_TYPE_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARA_TYPEColumn {
                get {
                    return this.columnPARA_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEColumn {
                get {
                    return this.columnPRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_TRANS_REPORTRow this[int index] {
                get {
                    return ((BILL_TRANS_REPORTRow)(this.Rows[index]));
                }
            }
            
            public event BILL_TRANS_REPORTRowChangeEventHandler BILL_TRANS_REPORTRowChanging;
            
            public event BILL_TRANS_REPORTRowChangeEventHandler BILL_TRANS_REPORTRowChanged;
            
            public event BILL_TRANS_REPORTRowChangeEventHandler BILL_TRANS_REPORTRowDeleting;
            
            public event BILL_TRANS_REPORTRowChangeEventHandler BILL_TRANS_REPORTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBILL_TRANS_REPORTRow(BILL_TRANS_REPORTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_TRANS_REPORTRow AddBILL_TRANS_REPORTRow(BILL_MAS_REPORTRow parentBILL_MAS_REPORTRowByBILL_MAS_REPORT_BILL_TRANS_REPORT, int DETAILID, int PARA_TYPE_CODE, string PARA_TYPE, int PRICE) {
                BILL_TRANS_REPORTRow rowBILL_TRANS_REPORTRow = ((BILL_TRANS_REPORTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DETAILID,
                        PARA_TYPE_CODE,
                        PARA_TYPE,
                        PRICE};
                if ((parentBILL_MAS_REPORTRowByBILL_MAS_REPORT_BILL_TRANS_REPORT != null)) {
                    columnValuesArray[0] = parentBILL_MAS_REPORTRowByBILL_MAS_REPORT_BILL_TRANS_REPORT[0];
                }
                rowBILL_TRANS_REPORTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBILL_TRANS_REPORTRow);
                return rowBILL_TRANS_REPORTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BILL_TRANS_REPORTDataTable cln = ((BILL_TRANS_REPORTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BILL_TRANS_REPORTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBILL_NO = base.Columns["BILL_NO"];
                this.columnDETAILID = base.Columns["DETAILID"];
                this.columnPARA_TYPE_CODE = base.Columns["PARA_TYPE_CODE"];
                this.columnPARA_TYPE = base.Columns["PARA_TYPE"];
                this.columnPRICE = base.Columns["PRICE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBILL_NO = new global::System.Data.DataColumn("BILL_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBILL_NO);
                this.columnDETAILID = new global::System.Data.DataColumn("DETAILID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDETAILID);
                this.columnPARA_TYPE_CODE = new global::System.Data.DataColumn("PARA_TYPE_CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARA_TYPE_CODE);
                this.columnPARA_TYPE = new global::System.Data.DataColumn("PARA_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARA_TYPE);
                this.columnPRICE = new global::System.Data.DataColumn("PRICE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_TRANS_REPORTRow NewBILL_TRANS_REPORTRow() {
                return ((BILL_TRANS_REPORTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BILL_TRANS_REPORTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BILL_TRANS_REPORTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BILL_TRANS_REPORTRowChanged != null)) {
                    this.BILL_TRANS_REPORTRowChanged(this, new BILL_TRANS_REPORTRowChangeEvent(((BILL_TRANS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BILL_TRANS_REPORTRowChanging != null)) {
                    this.BILL_TRANS_REPORTRowChanging(this, new BILL_TRANS_REPORTRowChangeEvent(((BILL_TRANS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BILL_TRANS_REPORTRowDeleted != null)) {
                    this.BILL_TRANS_REPORTRowDeleted(this, new BILL_TRANS_REPORTRowChangeEvent(((BILL_TRANS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BILL_TRANS_REPORTRowDeleting != null)) {
                    this.BILL_TRANS_REPORTRowDeleting(this, new BILL_TRANS_REPORTRowChangeEvent(((BILL_TRANS_REPORTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBILL_TRANS_REPORTRow(BILL_TRANS_REPORTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DB ds = new DB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BILL_TRANS_REPORTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Bill_MasRow : global::System.Data.DataRow {
            
            private Bill_MasDataTable tableBill_Mas;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Bill_MasRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBill_Mas = ((Bill_MasDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BILL_NO {
                get {
                    try {
                        return ((int)(this[this.tableBill_Mas.BILL_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_NO\' in table \'Bill_Mas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Mas.BILL_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_DATE {
                get {
                    try {
                        return ((string)(this[this.tableBill_Mas.BILL_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_DATE\' in table \'Bill_Mas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Mas.BILL_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_TIME {
                get {
                    try {
                        return ((string)(this[this.tableBill_Mas.BILL_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_TIME\' in table \'Bill_Mas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Mas.BILL_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LAB_CODE {
                get {
                    try {
                        return ((int)(this[this.tableBill_Mas.LAB_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LAB_CODE\' in table \'Bill_Mas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Mas.LAB_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TOTAL_AMT {
                get {
                    try {
                        return ((int)(this[this.tableBill_Mas.TOTAL_AMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTAL_AMT\' in table \'Bill_Mas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Mas.TOTAL_AMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LESS_AMT {
                get {
                    try {
                        return ((int)(this[this.tableBill_Mas.LESS_AMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LESS_AMT\' in table \'Bill_Mas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Mas.LESS_AMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NET_AMT {
                get {
                    try {
                        return ((int)(this[this.tableBill_Mas.NET_AMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NET_AMT\' in table \'Bill_Mas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Mas.NET_AMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_NONull() {
                return this.IsNull(this.tableBill_Mas.BILL_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_NONull() {
                this[this.tableBill_Mas.BILL_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_DATENull() {
                return this.IsNull(this.tableBill_Mas.BILL_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_DATENull() {
                this[this.tableBill_Mas.BILL_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_TIMENull() {
                return this.IsNull(this.tableBill_Mas.BILL_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_TIMENull() {
                this[this.tableBill_Mas.BILL_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAB_CODENull() {
                return this.IsNull(this.tableBill_Mas.LAB_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAB_CODENull() {
                this[this.tableBill_Mas.LAB_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_AMTNull() {
                return this.IsNull(this.tableBill_Mas.TOTAL_AMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_AMTNull() {
                this[this.tableBill_Mas.TOTAL_AMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLESS_AMTNull() {
                return this.IsNull(this.tableBill_Mas.LESS_AMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLESS_AMTNull() {
                this[this.tableBill_Mas.LESS_AMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNET_AMTNull() {
                return this.IsNull(this.tableBill_Mas.NET_AMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNET_AMTNull() {
                this[this.tableBill_Mas.NET_AMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransRow[] GetBill_TransRows() {
                if ((this.Table.ChildRelations["Bill_Mas_Bill_Trans"] == null)) {
                    return new Bill_TransRow[0];
                }
                else {
                    return ((Bill_TransRow[])(base.GetChildRows(this.Table.ChildRelations["Bill_Mas_Bill_Trans"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRow[] GetLAB_MASRows() {
                if ((this.Table.ChildRelations["Bill_Mas_LAB_MAS"] == null)) {
                    return new LAB_MASRow[0];
                }
                else {
                    return ((LAB_MASRow[])(base.GetChildRows(this.Table.ChildRelations["Bill_Mas_LAB_MAS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Bill_TransRow : global::System.Data.DataRow {
            
            private Bill_TransDataTable tableBill_Trans;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Bill_TransRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBill_Trans = ((Bill_TransDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BILL_NO {
                get {
                    try {
                        return ((int)(this[this.tableBill_Trans.BILL_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_NO\' in table \'Bill_Trans\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Trans.BILL_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DETAILID {
                get {
                    try {
                        return ((int)(this[this.tableBill_Trans.DETAILIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DETAILID\' in table \'Bill_Trans\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Trans.DETAILIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARA_TYPE_CODE {
                get {
                    try {
                        return ((int)(this[this.tableBill_Trans.PARA_TYPE_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARA_TYPE_CODE\' in table \'Bill_Trans\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBill_Trans.PARA_TYPE_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasRow Bill_MasRow {
                get {
                    return ((Bill_MasRow)(this.GetParentRow(this.Table.ParentRelations["Bill_Mas_Bill_Trans"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Bill_Mas_Bill_Trans"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_NONull() {
                return this.IsNull(this.tableBill_Trans.BILL_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_NONull() {
                this[this.tableBill_Trans.BILL_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDETAILIDNull() {
                return this.IsNull(this.tableBill_Trans.DETAILIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDETAILIDNull() {
                this[this.tableBill_Trans.DETAILIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARA_TYPE_CODENull() {
                return this.IsNull(this.tableBill_Trans.PARA_TYPE_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARA_TYPE_CODENull() {
                this[this.tableBill_Trans.PARA_TYPE_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARA_TYPE_MASRow[] GetPARA_TYPE_MASRows() {
                if ((this.Table.ChildRelations["Bill_Trans_PARA_TYPE_MAS"] == null)) {
                    return new PARA_TYPE_MASRow[0];
                }
                else {
                    return ((PARA_TYPE_MASRow[])(base.GetChildRows(this.Table.ChildRelations["Bill_Trans_PARA_TYPE_MAS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PARA_TYPE_MASRow : global::System.Data.DataRow {
            
            private PARA_TYPE_MASDataTable tablePARA_TYPE_MAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARA_TYPE_MASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePARA_TYPE_MAS = ((PARA_TYPE_MASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARA_TYPE_CODE {
                get {
                    try {
                        return ((int)(this[this.tablePARA_TYPE_MAS.PARA_TYPE_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARA_TYPE_CODE\' in table \'PARA_TYPE_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARA_TYPE_MAS.PARA_TYPE_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARA_TYPE {
                get {
                    try {
                        return ((string)(this[this.tablePARA_TYPE_MAS.PARA_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARA_TYPE\' in table \'PARA_TYPE_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARA_TYPE_MAS.PARA_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PRICE {
                get {
                    try {
                        return ((int)(this[this.tablePARA_TYPE_MAS.PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRICE\' in table \'PARA_TYPE_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARA_TYPE_MAS.PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransRow Bill_TransRow {
                get {
                    return ((Bill_TransRow)(this.GetParentRow(this.Table.ParentRelations["Bill_Trans_PARA_TYPE_MAS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Bill_Trans_PARA_TYPE_MAS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARA_TYPE_CODENull() {
                return this.IsNull(this.tablePARA_TYPE_MAS.PARA_TYPE_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARA_TYPE_CODENull() {
                this[this.tablePARA_TYPE_MAS.PARA_TYPE_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARA_TYPENull() {
                return this.IsNull(this.tablePARA_TYPE_MAS.PARA_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARA_TYPENull() {
                this[this.tablePARA_TYPE_MAS.PARA_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICENull() {
                return this.IsNull(this.tablePARA_TYPE_MAS.PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICENull() {
                this[this.tablePARA_TYPE_MAS.PRICEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LAB_MASRow : global::System.Data.DataRow {
            
            private LAB_MASDataTable tableLAB_MAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LAB_MASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLAB_MAS = ((LAB_MASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LAB_CODE {
                get {
                    try {
                        return ((int)(this[this.tableLAB_MAS.LAB_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LAB_CODE\' in table \'LAB_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLAB_MAS.LAB_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int P_CODE {
                get {
                    try {
                        return ((int)(this[this.tableLAB_MAS.P_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_CODE\' in table \'LAB_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLAB_MAS.P_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int R_CODE {
                get {
                    try {
                        return ((int)(this[this.tableLAB_MAS.R_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'R_CODE\' in table \'LAB_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLAB_MAS.R_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAB_DATE {
                get {
                    try {
                        return ((string)(this[this.tableLAB_MAS.LAB_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LAB_DATE\' in table \'LAB_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLAB_MAS.LAB_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasRow Bill_MasRow {
                get {
                    return ((Bill_MasRow)(this.GetParentRow(this.Table.ParentRelations["Bill_Mas_LAB_MAS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Bill_Mas_LAB_MAS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAB_CODENull() {
                return this.IsNull(this.tableLAB_MAS.LAB_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAB_CODENull() {
                this[this.tableLAB_MAS.LAB_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_CODENull() {
                return this.IsNull(this.tableLAB_MAS.P_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_CODENull() {
                this[this.tableLAB_MAS.P_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsR_CODENull() {
                return this.IsNull(this.tableLAB_MAS.R_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetR_CODENull() {
                this[this.tableLAB_MAS.R_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAB_DATENull() {
                return this.IsNull(this.tableLAB_MAS.LAB_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAB_DATENull() {
                this[this.tableLAB_MAS.LAB_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_MASRow[] GetPATIENT_MASRows() {
                if ((this.Table.ChildRelations["LAB_MAS_PATIENT_MAS"] == null)) {
                    return new PATIENT_MASRow[0];
                }
                else {
                    return ((PATIENT_MASRow[])(base.GetChildRows(this.Table.ChildRelations["LAB_MAS_PATIENT_MAS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REF_DR_MASRow[] GetREF_DR_MASRows() {
                if ((this.Table.ChildRelations["LAB_MAS_REF_DR_MAS"] == null)) {
                    return new REF_DR_MASRow[0];
                }
                else {
                    return ((REF_DR_MASRow[])(base.GetChildRows(this.Table.ChildRelations["LAB_MAS_REF_DR_MAS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PATIENT_MASRow : global::System.Data.DataRow {
            
            private PATIENT_MASDataTable tablePATIENT_MAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PATIENT_MASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePATIENT_MAS = ((PATIENT_MASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int P_CODE {
                get {
                    try {
                        return ((int)(this[this.tablePATIENT_MAS.P_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_CODE\' in table \'PATIENT_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_MAS.P_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_NAME {
                get {
                    try {
                        return ((string)(this[this.tablePATIENT_MAS.P_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_NAME\' in table \'PATIENT_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_MAS.P_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_AGE {
                get {
                    try {
                        return ((string)(this[this.tablePATIENT_MAS.P_AGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_AGE\' in table \'PATIENT_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_MAS.P_AGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_SEX {
                get {
                    try {
                        return ((string)(this[this.tablePATIENT_MAS.P_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_SEX\' in table \'PATIENT_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_MAS.P_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_AREA {
                get {
                    try {
                        return ((string)(this[this.tablePATIENT_MAS.P_AREAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_AREA\' in table \'PATIENT_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_MAS.P_AREAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRow LAB_MASRow {
                get {
                    return ((LAB_MASRow)(this.GetParentRow(this.Table.ParentRelations["LAB_MAS_PATIENT_MAS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LAB_MAS_PATIENT_MAS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_CODENull() {
                return this.IsNull(this.tablePATIENT_MAS.P_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_CODENull() {
                this[this.tablePATIENT_MAS.P_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_NAMENull() {
                return this.IsNull(this.tablePATIENT_MAS.P_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_NAMENull() {
                this[this.tablePATIENT_MAS.P_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_AGENull() {
                return this.IsNull(this.tablePATIENT_MAS.P_AGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_AGENull() {
                this[this.tablePATIENT_MAS.P_AGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_SEXNull() {
                return this.IsNull(this.tablePATIENT_MAS.P_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_SEXNull() {
                this[this.tablePATIENT_MAS.P_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_AREANull() {
                return this.IsNull(this.tablePATIENT_MAS.P_AREAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_AREANull() {
                this[this.tablePATIENT_MAS.P_AREAColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REF_DR_MASRow : global::System.Data.DataRow {
            
            private REF_DR_MASDataTable tableREF_DR_MAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REF_DR_MASRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREF_DR_MAS = ((REF_DR_MASDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int R_CODE {
                get {
                    try {
                        return ((int)(this[this.tableREF_DR_MAS.R_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'R_CODE\' in table \'REF_DR_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREF_DR_MAS.R_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string R_NAME {
                get {
                    try {
                        return ((string)(this[this.tableREF_DR_MAS.R_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'R_NAME\' in table \'REF_DR_MAS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableREF_DR_MAS.R_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRow LAB_MASRow {
                get {
                    return ((LAB_MASRow)(this.GetParentRow(this.Table.ParentRelations["LAB_MAS_REF_DR_MAS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LAB_MAS_REF_DR_MAS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsR_CODENull() {
                return this.IsNull(this.tableREF_DR_MAS.R_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetR_CODENull() {
                this[this.tableREF_DR_MAS.R_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsR_NAMENull() {
                return this.IsNull(this.tableREF_DR_MAS.R_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetR_NAMENull() {
                this[this.tableREF_DR_MAS.R_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BILL_MAS_REPORTRow : global::System.Data.DataRow {
            
            private BILL_MAS_REPORTDataTable tableBILL_MAS_REPORT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_MAS_REPORTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBILL_MAS_REPORT = ((BILL_MAS_REPORTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BILL_NO {
                get {
                    try {
                        return ((int)(this[this.tableBILL_MAS_REPORT.BILL_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_NO\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.BILL_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_DATE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.BILL_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_DATE\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.BILL_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BILL_TIME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.BILL_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_TIME\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.BILL_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LAB_CODE {
                get {
                    try {
                        return ((int)(this[this.tableBILL_MAS_REPORT.LAB_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LAB_CODE\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.LAB_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int P_CODE {
                get {
                    try {
                        return ((int)(this[this.tableBILL_MAS_REPORT.P_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_CODE\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.P_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.P_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_NAME\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.P_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_AGE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.P_AGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_AGE\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.P_AGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_SEX {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.P_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_SEX\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.P_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string P_AREA {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.P_AREAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'P_AREA\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.P_AREAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int R_CODE {
                get {
                    try {
                        return ((int)(this[this.tableBILL_MAS_REPORT.R_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'R_CODE\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.R_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string R_NAME {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.R_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'R_NAME\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.R_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LAB_DATE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_MAS_REPORT.LAB_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LAB_DATE\' in table \'BILL_MAS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_MAS_REPORT.LAB_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_NONull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.BILL_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_NONull() {
                this[this.tableBILL_MAS_REPORT.BILL_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_DATENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.BILL_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_DATENull() {
                this[this.tableBILL_MAS_REPORT.BILL_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_TIMENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.BILL_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_TIMENull() {
                this[this.tableBILL_MAS_REPORT.BILL_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAB_CODENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.LAB_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAB_CODENull() {
                this[this.tableBILL_MAS_REPORT.LAB_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_CODENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.P_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_CODENull() {
                this[this.tableBILL_MAS_REPORT.P_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_NAMENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.P_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_NAMENull() {
                this[this.tableBILL_MAS_REPORT.P_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_AGENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.P_AGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_AGENull() {
                this[this.tableBILL_MAS_REPORT.P_AGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_SEXNull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.P_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_SEXNull() {
                this[this.tableBILL_MAS_REPORT.P_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsP_AREANull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.P_AREAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetP_AREANull() {
                this[this.tableBILL_MAS_REPORT.P_AREAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsR_CODENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.R_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetR_CODENull() {
                this[this.tableBILL_MAS_REPORT.R_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsR_NAMENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.R_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetR_NAMENull() {
                this[this.tableBILL_MAS_REPORT.R_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLAB_DATENull() {
                return this.IsNull(this.tableBILL_MAS_REPORT.LAB_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLAB_DATENull() {
                this[this.tableBILL_MAS_REPORT.LAB_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_TRANS_REPORTRow[] GetBILL_TRANS_REPORTRows() {
                if ((this.Table.ChildRelations["BILL_MAS_REPORT_BILL_TRANS_REPORT"] == null)) {
                    return new BILL_TRANS_REPORTRow[0];
                }
                else {
                    return ((BILL_TRANS_REPORTRow[])(base.GetChildRows(this.Table.ChildRelations["BILL_MAS_REPORT_BILL_TRANS_REPORT"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BILL_TRANS_REPORTRow : global::System.Data.DataRow {
            
            private BILL_TRANS_REPORTDataTable tableBILL_TRANS_REPORT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BILL_TRANS_REPORTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBILL_TRANS_REPORT = ((BILL_TRANS_REPORTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BILL_NO {
                get {
                    try {
                        return ((int)(this[this.tableBILL_TRANS_REPORT.BILL_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BILL_NO\' in table \'BILL_TRANS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_TRANS_REPORT.BILL_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DETAILID {
                get {
                    try {
                        return ((int)(this[this.tableBILL_TRANS_REPORT.DETAILIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DETAILID\' in table \'BILL_TRANS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_TRANS_REPORT.DETAILIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARA_TYPE_CODE {
                get {
                    try {
                        return ((int)(this[this.tableBILL_TRANS_REPORT.PARA_TYPE_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARA_TYPE_CODE\' in table \'BILL_TRANS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_TRANS_REPORT.PARA_TYPE_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARA_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableBILL_TRANS_REPORT.PARA_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARA_TYPE\' in table \'BILL_TRANS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_TRANS_REPORT.PARA_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PRICE {
                get {
                    try {
                        return ((int)(this[this.tableBILL_TRANS_REPORT.PRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRICE\' in table \'BILL_TRANS_REPORT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBILL_TRANS_REPORT.PRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MAS_REPORTRow BILL_MAS_REPORTRow {
                get {
                    return ((BILL_MAS_REPORTRow)(this.GetParentRow(this.Table.ParentRelations["BILL_MAS_REPORT_BILL_TRANS_REPORT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BILL_MAS_REPORT_BILL_TRANS_REPORT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBILL_NONull() {
                return this.IsNull(this.tableBILL_TRANS_REPORT.BILL_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBILL_NONull() {
                this[this.tableBILL_TRANS_REPORT.BILL_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDETAILIDNull() {
                return this.IsNull(this.tableBILL_TRANS_REPORT.DETAILIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDETAILIDNull() {
                this[this.tableBILL_TRANS_REPORT.DETAILIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARA_TYPE_CODENull() {
                return this.IsNull(this.tableBILL_TRANS_REPORT.PARA_TYPE_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARA_TYPE_CODENull() {
                this[this.tableBILL_TRANS_REPORT.PARA_TYPE_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARA_TYPENull() {
                return this.IsNull(this.tableBILL_TRANS_REPORT.PARA_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARA_TYPENull() {
                this[this.tableBILL_TRANS_REPORT.PARA_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICENull() {
                return this.IsNull(this.tableBILL_TRANS_REPORT.PRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICENull() {
                this[this.tableBILL_TRANS_REPORT.PRICEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Bill_MasRowChangeEvent : global::System.EventArgs {
            
            private Bill_MasRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasRowChangeEvent(Bill_MasRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_MasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Bill_TransRowChangeEvent : global::System.EventArgs {
            
            private Bill_TransRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransRowChangeEvent(Bill_TransRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Bill_TransRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PARA_TYPE_MASRowChangeEvent : global::System.EventArgs {
            
            private PARA_TYPE_MASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARA_TYPE_MASRowChangeEvent(PARA_TYPE_MASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARA_TYPE_MASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LAB_MASRowChangeEvent : global::System.EventArgs {
            
            private LAB_MASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRowChangeEvent(LAB_MASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LAB_MASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PATIENT_MASRowChangeEvent : global::System.EventArgs {
            
            private PATIENT_MASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_MASRowChangeEvent(PATIENT_MASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PATIENT_MASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REF_DR_MASRowChangeEvent : global::System.EventArgs {
            
            private REF_DR_MASRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REF_DR_MASRowChangeEvent(REF_DR_MASRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REF_DR_MASRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BILL_MAS_REPORTRowChangeEvent : global::System.EventArgs {
            
            private BILL_MAS_REPORTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MAS_REPORTRowChangeEvent(BILL_MAS_REPORTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_MAS_REPORTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BILL_TRANS_REPORTRowChangeEvent : global::System.EventArgs {
            
            private BILL_TRANS_REPORTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_TRANS_REPORTRowChangeEvent(BILL_TRANS_REPORTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BILL_TRANS_REPORTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591